demo()
clear
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
?lapply
lapply(iris, )
head(iris)
?split
?apply
?which
x<-which(iris, iris$Species == "virginica")
x<-which(iris, Species == "virginica")
x<-which(iris, Species = "virginica")
?split
x <- split(iris, Species = "virginica")
x <- split(iris, Species)
x <- split(iris, $Species)
x <- split(iris, "virginica")
x
?tapply
x <- subset(iris, iris$Species == "virginica")
head(x)
?lapply
?tapply
?apply
apply(x, 2, mean)
args(apply)
str(apply)
apply(x, 2, mean, is.na = FALSE)
apply(x, 2, mean, is.na = TRUE)
apply(x, 2, mean, is.na == TRUE)
apply(x, 2, mean, is.na == FALSE)
?is.na
?complete.cases
?mean
apply(x, 2, mean, na.rm = TRUE)
apply(x, 2, mean, na.rm = FALSE)
?colMeans
colMeans(x, na.rm = TRUE)
head(x)
colMeans(x, na.rm = FALSE)
m <- as.numeric(x)
dim(x)
type(x)
library(datasets)
data(iris)
x <- subset(iris, $Species = "virginica")
x <- subset(iris, Species = "virginica")
x <- subset(iris, iris$Species = "virginica")
x <- subset(iris, iris$Species == "virginica")
y <- colMeans(x)
y <- as.numeric(x)
colMeans(iris[iris$Species == "virginica",])
?iris
library(datasets)
data(iris)
colMeans(iris[iris$Species == "virginica",])
?sapply
sapply(iris, colMeans(iris[iris$Species == "virginica",]))
x <- as.numeric(iris)
?lapply
x <- subset(iris, iris$Species == "virginica")
lapply(x, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
?tapply
y <- with(mtcars, tapply(hp, cyl, mean))
y
x <- y[3] - y[1]
x
debug(ls)
ls()
library(swirl)
swirl()
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- vect(1:20)
my_vector <- c(1:20)
my_vetor <- 1:20
my_vector <- (1:20)
my_vector = 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vect)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
class()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags&orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shape <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, charater(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?solve
?vect
?vec
?vector
function(mean)
x <- matrix(1:4, 2)
x
source("cachematrix.R")
setwd("~/Documents/Studium/Coursera/R/ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix(x)
cacheSolve(x)
x <- matrix(1:4,2)
makeCacheMatrix <- function(x = matrix()) {
inv_m <- NULL
set <- function(y) {
x <<- y
inv_m <<- NULL     ## sets value of inverse matrix to NULL
}
get <- function() x    ## gets value of matrix x
setinv <- function(solve) inv_m <<- solve    ##
getinv <- function() inv_m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)   ## list containing four arguments subsequently used by cacheSolve function
}
## cacheSolve function first checks whether value for matrix pre-existing and not NULL
## if not NULL, uses pre-existing value of matrix and assigns that value to it
## if NULL, it calculates the inverse of the matrix using the solve function
## and sets this new value for subsequent reference in makeCacheMatrix argument x$setinv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_m <- x$getinv()             ## setting object inv_m to value stored in cache function
if(!is.null(inv_m)) {
message("getting cached data")  ## prints message "getting cached data"
return(inv_m)                   ## returns value of inv_m
}
data <- x$get()                 ## if getinv not NULL, value of matrix x called into object "data"
inv_m <- solve(data, ...)       ## inverse of matrix x calculated and assigned to inv_m
x$setinv(inv_m)                 ## new value of inv_m assigned to argument "setinv" of function makeCacheMatrix
inv_m                           ##
}
